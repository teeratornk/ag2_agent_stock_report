"""
Iteration: Outer 1, Inner 1
Timestamp: 20251026_134719
Execution Status: FAILED
Feedback from Planner:
No feedback yet
"""

# nvda_monthly_analysis.py
# Engineer: autogenerated for Planner request 2025-10-23

import matplotlib
matplotlib.use("Agg")                       # 6. Non-interactive backend

import os
import logging
from datetime import datetime, timedelta

import yfinance as yf                       # 1. Fetch stock data
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns                       # for a cleaner style

# --------------------------------------------------------------------------
# 0. Logging configuration
# --------------------------------------------------------------------------
LOG_FORMAT = "%(asctime)s [%(levelname)s] %(message)s"
logging.basicConfig(format=LOG_FORMAT, level=logging.INFO)
logger = logging.getLogger(__name__)

# --------------------------------------------------------------------------
# 1. Constant configuration
# --------------------------------------------------------------------------
TICKER      = "NVDA"
START_DATE  = "2025-09-23"
END_DATE_EX = "2025-10-24"                  # yfinance end-date is exclusive
RAW_CSV     = "data/nvda_20250923_20251023.csv"
PRICE_FIG   = "figures/nvda_price_moving_avg.png"
VOLUME_FIG  = "figures/nvda_volume.png"

# --------------------------------------------------------------------------
# 2. Utility functions
# --------------------------------------------------------------------------
def ensure_directories() -> None:
    """
    Create 'data' and 'figures' directories if they don't already exist.
    """
    os.makedirs("data", exist_ok=True)
    os.makedirs("figures", exist_ok=True)
    logger.debug("Ensured data/ and figures/ directories exist.")


def fetch_stock_data(ticker: str,
                     start_date: str,
                     end_date_exclusive: str) -> pd.DataFrame:
    """
    Fetch daily stock data (inclusive start, exclusive end) for the specified
    date range using yfinance.
    """
    logger.info(f"Fetching data for {ticker} from {start_date} to "
                f"{datetime.fromisoformat(end_date_exclusive) - timedelta(days=1):%Y-%m-%d}")
    try:
        yfticker = yf.Ticker(ticker)
        data = yfticker.history(start=start_date, end=end_date_exclusive)
        if data.empty:
            raise ValueError("No data was returned by yfinance.")
        data.index = data.index.tz_localize(None)  # Drop timezone for consistency
        return data
    except Exception as exc:
        logger.error("Error fetching data", exc_info=exc)
        raise


def calculate_rsi(series: pd.Series, period: int = 14) -> pd.Series:
    """
    Compute the Relative Strength Index (RSI) for a given price series.
    """
    delta = series.diff()
    gain = np.where(delta > 0,  delta, 0.0)
    loss = np.where(delta < 0, -delta, 0.0)

    gain_series = pd.Series(gain, index=series.index)
    loss_series = pd.Series(loss, index=series.index)

    avg_gain = gain_series.rolling(window=period, min_periods=period).mean()
    avg_loss = loss_series.rolling(window=period, min_periods=period).mean()

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi


def add_indicators(df: pd.DataFrame) -> pd.DataFrame:
    """
    Add SMAs (5-day, 20-day) and 14-day RSI to the DataFrame.
    """
    df = df.copy()
    df["SMA_5"]  = df["Adj Close"].rolling(window=5).mean()
    df["SMA_20"] = df["Adj Close"].rolling(window=20).mean()
    df["RSI_14"] = calculate_rsi(df["Adj Close"], period=14)
    return df


def compute_summary_metrics(df: pd.DataFrame) -> dict:
    """
    Compute all summary statistics requested by Planner.
    """
    pct_change_full = (df["Adj Close"][-1] - df["Adj Close"][0]) / df["Adj Close"][0] * 100
    max_price       = df["Adj Close"].max()
    min_price       = df["Adj Close"].min()
    mean_price      = df["Adj Close"].mean()
    avg_volume      = df["Volume"].mean()

    # daily pct change
    df["PctChange"] = df["Adj Close"].pct_change() * 100
    largest_gains   = df.nlargest(3, "PctChange")[["PctChange"]]
    largest_losses  = df.nsmallest(3, "PctChange")[["PctChange"]]

    summary = {
        "percentage_change_full_period_%": round(pct_change_full, 2),
        "max_adj_close": round(max_price, 2),
        "min_adj_close": round(min_price, 2),
        "average_adj_close": round(mean_price, 2),
        "average_daily_volume": int(avg_volume),
        "largest_single_day_gains_%": largest_gains,
        "largest_single_day_losses_%": largest_losses,
    }
    return summary


def plot_price_with_sma(df: pd.DataFrame, filename: str) -> None:
    """
    Create and save a line chart of Adj Close with 5- and 20-day SMAs.
    """
    sns.set_style("whitegrid")
    plt.figure(figsize=(14, 7))

    plt.plot(df.index, df["Adj Close"], label="Adj Close", color="steelblue", linewidth=2)
    plt.plot(df.index, df["SMA_5"],  label="5-day SMA", color="orange", linewidth=1.5)
    plt.plot(df.index, df["SMA_20"], label="20-day SMA", color="green", linewidth=1.5)

    plt.title("Nvidia (NVDA) Price and Moving Averages – Sep 23 to Oct 23 2025")
    plt.xlabel("Date")
    plt.ylabel("Price (USD)")
    plt.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(filename, dpi=110, bbox_inches="tight")
    plt.close()
    logger.info(f"Saved price/SMA figure to {filename}")


def plot_volume(df: pd.DataFrame, filename: str) -> None:
    """
    Create and save a bar chart of daily trading volume (in millions).
    """
    sns.set_style("whitegrid")
    plt.figure(figsize=(14, 7))

    volumes_millions = df["Volume"] / 1_000_000
    plt.bar(df.index, volumes_millions, color="slategray")

    plt.title("Nvidia (NVDA) Daily Trading Volume – Sep 23 to Oct 23 2025")
    plt.xlabel("Date")
    plt.ylabel("Volume (Millions of Shares)")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(filename, dpi=110, bbox_inches="tight")
    plt.close()
    logger.info(f"Saved volume figure to {filename}")


def main() -> None:
    ensure_directories()

    # ------------------------------------------------------------------
    # Fetch data
    # ------------------------------------------------------------------
    df = fetch_stock_data(TICKER, START_DATE, END_DATE_EX)

    # Save raw data
    df.to_csv(RAW_CSV)
    logger.info(f"Raw data saved to {RAW_CSV}")
    print(f"Raw data head:\n{df.head()}\n")

    # ------------------------------------------------------------------
    # Add indicators & calculations
    # ------------------------------------------------------------------
    df = add_indicators(df)

    # ------------------------------------------------------------------
    # Compute summary metrics
    # ------------------------------------------------------------------
    summary = compute_summary_metrics(df)

    # ------------------------------------------------------------------
    # Output summary to console
    # ------------------------------------------------------------------
    print("===== Nvidia (NVDA) Summary – Sep 23 to Oct 23 2025 =====")
    print(f"Percentage price change (Adj Close): {summary['percentage_change_full_period_%']:.2f}%")
    print(f"Max Adj Close:   ${summary['max_adj_close']}")
    print(f"Min Adj Close:   ${summary['min_adj_close']}")
    print(f"Average Adj Close: ${summary['average_adj_close']}")
    print(f"Average Daily Volume: {summary['average_daily_volume']:,} shares")
    print("\nTop 3 Single-Day Gains (%):")
    print(summary["largest_single_day_gains_%"].to_string())
    print("\nTop 3 Single-Day Losses (%):")
    print(summary["largest_single_day_losses_%"].to_string())
    print("=========================================================\n")

    # ------------------------------------------------------------------
    # Visualizations
    # ------------------------------------------------------------------
    plot_price_with_sma(df, PRICE_FIG)
    plot_volume(df, VOLUME_FIG)

    # ------------------------------------------------------------------
    # Final status
    # ------------------------------------------------------------------
    logger.info("Analysis complete.")


if __name__ == "__main__":
    main()